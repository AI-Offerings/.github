name: Update README with popular repos

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 9 * * 1'   # Every Monday 09:00 UTC

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate repo list and update README
        uses: actions/github-script@v7
        env:
          # === CONFIGURE THESE ===
          # For an ORG profile README, set ORG to your organization name and README_PATH to 'profile/README.md'
          # For a user profile README, set ORG to your GitHub username and README_PATH to 'README.md'
          ORG: AI-Offerings
          README_PATH: profile/README.md
          NUM_REPOS: '6'            # how many to show
          EXCLUDE: 'archive-,test-' # comma-separated prefixes to exclude (optional)
        with:
          script: |
            const fs = require('fs');
            const path = process.env.README_PATH || 'README.md';
            const org = process.env.ORG;
            const n = parseInt(process.env.NUM_REPOS || '6', 10);
            const exclude = (process.env.EXCLUDE || '')
              .split(',')
              .map(s => s.trim())
              .filter(Boolean);

            if (!org) {
              core.setFailed('Set ORG env to your org or username.');
              return;
            }

            // 1) Fetch all public repos for org/user (handle pagination)
            let repos = [];
            let page = 1;
            while (true) {
              const { data } = await github.rest.repos.listForOrg({
                org, type: 'public', per_page: 100, page
              }).catch(async e => {
                // Fallback: if it's *not* an org, try listing for user
                if (e.status === 404 || e.status === 422) {
                  return await github.rest.repos.listForUser({
                    username: org, per_page: 100, page
                  });
                } else {
                  throw e;
                }
              });

              repos = repos.concat(data);
              if (!data || data.length < 100) break;
              page++;
            }

            // 2) Filter & sort
            repos = repos
              .filter(r => !r.archived && !r.disabled && r.private === false)
              .filter(r => exclude.length === 0 || !exclude.some(p => r.name.startsWith(p)))
              .sort((a, b) => b.stargazers_count - a.stargazers_count)
              .slice(0, n);

            // 3) Build markdown table
            const rows = repos.map(r => {
              const full = `${org}/${r.name}`;
              const desc = (r.description || '').replace(/\r?\n/g, ' ');
              const stars = `![Stars](https://img.shields.io/github/stars/${full}?style=social)`;
              const forks = `![Forks](https://img.shields.io/github/forks/${full}?style=social)`;
              return `| [${r.name}](${r.html_url}) | ${desc} | ${stars} ${forks} |`;
            });

            const table = [
              '| Repository | Description | Popularity |',
              '|-----------|-------------|-----------|',
              ...rows
            ].join('\n');

            // 4) Replace markers in README
            const start = '<!--REPO_CARDS:start-->';
            const end = '<!--REPO_CARDS:end-->';
            const readme = fs.readFileSync(path, 'utf8');

            if (!readme.includes(start) || !readme.includes(end)) {
              core.setFailed(`Markers ${start} ... ${end} not found in ${path}`);
              return;
            }

            const pattern = new RegExp(`${start}[\\s\\S]*?${end}`, 'm');
            const updated = readme.replace(pattern, `${start}\n${table}\n${end}`);

            if (updated !== readme) {
              fs.writeFileSync(path, updated);
              core.notice('README updated.');
            } else {
              core.notice('No changes detected.');
            }

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update popular repositories in README"
